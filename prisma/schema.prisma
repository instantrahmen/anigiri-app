// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.sqlite"
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  List     List[]
  ListItem ListItem[]

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model List {
  id      Int        @id @default(autoincrement())
  name    String
  owner   Account    @relation(fields: [ownerId], references: [id])
  ownerId String
  items   ListItem[]
  public  Boolean
}

model ListItem {
  id      Int     @id @default(autoincrement())
  malId   Int
  lists   List[]
  owner   Account @relation(fields: [ownerId], references: [id])
  ownerId String
}

model Anime {
  id            String @id @default(cuid())
  title         String
  type          String
  episodes      Int
  status        String
  picture       String
  thumbnail     String
  animeSeasonId String

  duration     Int
  animeSeason  AnimeSeason    @relation(fields: [animeSeasonId], references: [id])
  sources      Source[]
  synonyms     Synonym[]
  relatedAnime RelatedAnime[]
  tags         Tag[]
}

model AnimeSeason {
  id     String @id @default(cuid())
  season String
  year   Int

  anime Anime[]

  @@unique([season, year], name: "uniqueSeasonYear")
}

model Source {
  value   String @unique
  anime   Anime  @relation(fields: [animeId], references: [id])
  animeId String
}

model Synonym {
  id      String @id @default(cuid())
  anime   Anime  @relation(fields: [animeId], references: [id])
  animeId String
  value   String
}

model RelatedAnime {
  id      String @id @default(cuid())
  anime   Anime  @relation(fields: [animeId], references: [id])
  animeId String
  value   String
}

model Tag {
  id      String @id @default(cuid())
  anime   Anime  @relation(fields: [animeId], references: [id])
  animeId String
  value   String
}
